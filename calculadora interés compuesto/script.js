/******************************************************
 * Elementos del DOM
 ******************************************************/
const form = document.getElementById('calculator-form');
const chartCanvas = document.getElementById('savings-chart');
const summarySection = document.getElementById('summary');
const summaryInitial = document.getElementById('summary-initial');
const summaryContributed = document.getElementById('summary-contributed');
const summaryInterest = document.getElementById('summary-interest');
const summaryFinal = document.getElementById('summary-final');
const finalLevel = document.getElementById('final-level');

const resetBtn = document.getElementById('reset-btn');
const pdfBtn = document.getElementById('pdf-btn');

/******************************************************
 * Variables globales
 ******************************************************/
// Para mantener la instancia del gr√°fico y poder destruirla al recalcular
let savingsChart = null;

/******************************************************
 * Funciones principales
 ******************************************************/

/**
 * Calcula el crecimiento de los ahorros con inter√©s compuesto.
 * @param {number} initial - Monto inicial
 * @param {number} monthly - Aportaci√≥n mensual
 * @param {number} rate - Tasa de inter√©s anual (en %)
 * @param {number} years - N√∫mero de a√±os
 * @returns {number[]} Array con los montos acumulados al final de cada a√±o
 */
function calculateSavings(initial, monthly, rate, years) {
  const monthlyRate = rate / 100 / 12; // Tasa mensual en decimal
  let balance = initial;
  const dataPoints = [balance]; // Guardamos el balance inicial en la posici√≥n 0

  for (let month = 1; month <= years * 12; month++) {
    // A√±adimos la aportaci√≥n mensual
    balance += monthly;
    // Aplicamos el inter√©s sobre el balance
    balance += balance * monthlyRate;

    // Cada 12 meses (1 a√±o), guardamos el balance
    if (month % 12 === 0) {
      dataPoints.push(balance);
    }
  }
  
  return dataPoints;
}

/**
 * Renderiza la gr√°fica usando Chart.js
 * @param {number[]} data - Array con montos anuales
 */
function renderChart(data) {
  // Si ya hay un gr√°fico anterior, lo destruimos
  if (savingsChart) {
    savingsChart.destroy();
  }

  // Creamos las etiquetas para el eje X (A√±o 0, A√±o 1, etc.)
  const labels = data.map((_, i) => `A√±o ${i}`);

  // Instanciamos la gr√°fica
  savingsChart = new Chart(chartCanvas, {
    type: 'line',
    data: {
      labels: labels,
      datasets: [{
        label: 'Ahorros acumulados (‚Ç¨)',
        data: data,
        borderColor: 'blue',
        backgroundColor: 'rgba(0, 123, 255, 0.2)',
        fill: true,
        tension: 0.2
      }]
    },
    options: {
      responsive: true,
      scales: {
        x: {
          title: {
            display: true,
            text: 'Tiempo (a√±os)'
          }
        },
        y: {
          title: {
            display: true,
            text: 'Monto (‚Ç¨)'
          },
          beginAtZero: true
        }
      }
    }
  });
}

/**
 * Determina el nivel ‚Äúdivertido‚Äù en base al monto final
 * @param {number} finalAmount - Monto final acumulado
 * @returns {string} Mensaje del nivel
 */
function getFunLevel(finalAmount) {
  if (finalAmount < 10000) {
    return "üõ¥ Ahorros b√°sicos... ¬°pero ya es un comienzo!";
  } else if (finalAmount < 50000) {
    return "üîë ¬°Poco a poco! Quiz√°s un coche de segunda mano.";
  } else if (finalAmount < 200000) {
    return "üè† Piso en Oropesa incoming...";
  } else if (finalAmount < 500000) {
    return "üåû Piso en Marbella. Chanclas, sol y sangr√≠a.";
  } else if (finalAmount < 1000000) {
    return "üèéÔ∏è Lambo en camino. ¬°Vas con todo!";
  } else if (finalAmount < 5000000) {
    return "üõ´ Jet privado desbloqueado. Vida de lujo.";
  } else {
    return "üí∞ Modo Florentino P√©rez: ¬°montas tu propio equipo de f√∫tbol!";
  }
}

/**
 * Cambia el fondo del body dependiendo del monto final
 * @param {number} finalAmount
 */
function changeBackground(finalAmount) {
  if (finalAmount < 50000) {
    document.body.style.background = "linear-gradient(to bottom right, #FEE440, #FA8072)"; // Original
  } else if (finalAmount < 200000) {
    document.body.style.background = "linear-gradient(to bottom right, #ABEBC6, #58D68D)"; // Verde clarito
  } else if (finalAmount < 500000) {
    document.body.style.background = "linear-gradient(to bottom right, #7FB3D5, #5499C7)"; // Azul suave
  } else if (finalAmount < 1000000) {
    document.body.style.background = "linear-gradient(to bottom right, #F9E79F, #F4D03F)"; // Amarillo dorado
  } else if (finalAmount < 5000000) {
    document.body.style.background = "linear-gradient(to bottom right, #F5B7B1, #EC7063)"; // Rosa/rojo vibrante
  } else {
    document.body.style.background = "linear-gradient(to bottom right, #FFDF00, #FFD700)"; // Oro puro
  }
}

/******************************************************
 * Eventos
 ******************************************************/

// 1. Cuando se env√≠a el formulario
form.addEventListener('submit', (event) => {
  event.preventDefault();

  // Obtenemos valores del formulario
  const initialAmount = parseFloat(document.getElementById('initial-amount').value);
  const monthlyContribution = parseFloat(document.getElementById('monthly-contribution').value);
  const interestRate = parseFloat(document.getElementById('interest-rate').value);
  const years = parseInt(document.getElementById('years').value);

  // Validaciones b√°sicas
  if (isNaN(initialAmount) || initialAmount < 0) {
    alert("Por favor, ingresa un monto inicial v√°lido (‚â• 0).");
    return;
  }
  if (isNaN(monthlyContribution) || monthlyContribution < 0) {
    alert("Por favor, ingresa una aportaci√≥n mensual v√°lida (‚â• 0).");
    return;
  }
  if (isNaN(interestRate) || interestRate < 0) {
    alert("Por favor, ingresa una tasa de inter√©s anual v√°lida (‚â• 0).");
    return;
  }
  if (isNaN(years) || years < 1 || years > 100) {
    alert("Por favor, ingresa un n√∫mero de a√±os entre 1 y 100.");
    return;
  }

  // Calcular datos
  const savingsData = calculateSavings(initialAmount, monthlyContribution, interestRate, years);
  renderChart(savingsData);

  // Monto final (√∫ltimo valor del array)
  const finalAmount = savingsData[savingsData.length - 1];

  // Mostramos un resumen
  showSummary(initialAmount, monthlyContribution, years, finalAmount);

  // Cambiamos el fondo de la p√°gina en funci√≥n del resultado
  changeBackground(finalAmount);
});

// 2. Bot√≥n para reiniciar formulario y gr√°fica
resetBtn.addEventListener('click', () => {
  // Limpiamos campos
  document.getElementById('initial-amount').value = "";
  document.getElementById('monthly-contribution').value = "";
  document.getElementById('interest-rate').value = "";
  document.getElementById('years').value = "";

  // Ocultamos el resumen
  summarySection.classList.add("hidden");

  // Restauramos el fondo
  document.body.style.background = "linear-gradient(to bottom right, #FEE440, #FA8072)";

  // Destruimos la gr√°fica
  if (savingsChart) {
    savingsChart.destroy();
    savingsChart = null;
  }
});

// 3. Bot√≥n para exportar a PDF
pdfBtn.addEventListener('click', () => {
  exportToPDF();
});

// 4. Acorde√≥n FAQ
const accordions = document.querySelectorAll(".accordion");
accordions.forEach((acc) => {
  acc.addEventListener("click", function () {
    // Alternar la clase "active"
    this.classList.toggle("active");
    // Obtener el panel siguiente
    const panel = this.nextElementSibling;
    if (panel.style.maxHeight) {
      // Si est√° abierto, se cierra
      panel.style.maxHeight = null;
    } else {
      // Si est√° cerrado, se abre
      panel.style.maxHeight = panel.scrollHeight + "px";
    }
  });
});

/******************************************************
 * Funciones auxiliares
 ******************************************************/

/**
 * Muestra el resumen de resultados debajo de la gr√°fica
 */
function showSummary(initialAmount, monthlyContribution, years, finalAmount) {
  // Calculamos total aportado (aparte del inicial)
  const totalContributed = monthlyContribution * 12 * years;
  const interestEarned = finalAmount - (initialAmount + totalContributed);

  summaryInitial.textContent = `‚Ç¨${initialAmount.toFixed(2)}`;
  summaryContributed.textContent = `‚Ç¨${totalContributed.toFixed(2)}`;
  summaryInterest.textContent = `‚Ç¨${interestEarned.toFixed(2)}`;
  summaryFinal.textContent = `‚Ç¨${finalAmount.toFixed(2)}`;

  finalLevel.textContent = getFunLevel(finalAmount);

  // Mostramos el resumen
  summarySection.classList.remove("hidden");
}

/**
 * Exporta los resultados a PDF usando jsPDF
 */
function exportToPDF() {
  // Usamos la versi√≥n modular de jsPDF (2.5.1). Obtenemos el namespace
  const { jsPDF } = window.jspdf;

  const pdf = new jsPDF();

  // T√≠tulo
  pdf.setFontSize(16);
  pdf.text("Resumen de Ahorros", 10, 10);

  // Datos
  pdf.setFontSize(12);
  pdf.text(`Monto inicial: ${summaryInitial.textContent}`, 10, 20);
  pdf.text(`Total aportado: ${summaryContributed.textContent}`, 10, 30);
  pdf.text(`Intereses ganados: ${summaryInterest.textContent}`, 10, 40);
  pdf.text(`Monto final: ${summaryFinal.textContent}`, 10, 50);
  pdf.text(`Nivel: ${finalLevel.textContent}`, 10, 60);

  // Guardamos el archivo
  pdf.save("resumen_ahorros.pdf");
}
