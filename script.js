// Obtenemos las referencias a los elementos del DOM
const form = document.getElementById('calculator-form');
const chartCanvas = document.getElementById('savings-chart');
const resultMessage = document.getElementById('resultMessage');

// Variable para almacenar la instancia del gr√°fico y poder actualizarla
let savingsChart = null;

/**
 * Funci√≥n para calcular el crecimiento de los ahorros con inter√©s compuesto.
 * @param {number} initial - Monto inicial
 * @param {number} monthly - Aportaci√≥n mensual
 * @param {number} rate - Tasa de inter√©s anual (en %)
 * @param {number} years - N√∫mero de a√±os
 * @returns {number[]} Array con los montos acumulados al final de cada a√±o
 */
function calculateSavings(initial, monthly, rate, years) {
  const monthlyRate = rate / 100 / 12; // Tasa mensual en decimal
  let balance = initial;
  const dataPoints = [balance];

  for (let month = 1; month <= years * 12; month++) {
    // A√±adimos la aportaci√≥n mensual
    balance += monthly;
    // Aplicamos el inter√©s sobre el balance
    balance += balance * monthlyRate;

    // Cada 12 meses (1 a√±o), guardamos el balance en dataPoints
    if (month % 12 === 0) {
      dataPoints.push(balance);
    }
  }
  
  return dataPoints;
}

/**
 * Funci√≥n para renderizar la gr√°fica usando Chart.js
 * @param {number[]} data - Array con los montos anuales
 */
function renderChart(data) {
  // Si ya existe un gr√°fico anterior, lo destruimos para generar uno nuevo
  if (savingsChart) {
    savingsChart.destroy();
  }
  
  // Etiquetas para el eje X: del a√±o 0 al a√±o n
  const labels = data.map((_, index) => `A√±o ${index}`);

  savingsChart = new Chart(chartCanvas, {
    type: 'line',
    data: {
      labels: labels,
      datasets: [{
        label: 'Ahorros acumulados (‚Ç¨)',
        data: data,
        borderColor: 'blue',
        backgroundColor: 'rgba(0, 123, 255, 0.2)',
        fill: true,
        tension: 0.2
      }]
    },
    options: {
      responsive: true,
      scales: {
        x: {
          title: {
            display: true,
            text: 'Tiempo (a√±os)'
          }
        },
        y: {
          title: {
            display: true,
            text: 'Monto (‚Ç¨)'
          },
          beginAtZero: true
        }
      }
    }
  });
}

/**
 * Funci√≥n para determinar el "nivel divertido" en base al monto final
 * @param {number} finalAmount - Cantidad final de ahorro
 * @returns {string} Mensaje divertido
 */
function getFunLevel(finalAmount) {
  if (finalAmount < 50000) {
    return "¬°Te quedas en casa de tus padres! O pillas un patinete el√©ctrico. üè†";
  } else if (finalAmount < 200000) {
    return "Piso en Oropesa incoming... üéâ";
  } else if (finalAmount < 500000) {
    return "¬°Piso en Marbella! Sacando sangr√≠a y chanclas. üèñÔ∏è";
  } else if (finalAmount < 1000000) {
    return "¬°Lambo en camino! üèéÔ∏èüí®";
  } else {
    return "¬°Florentino P√©rez mode! Te montas tu propio club de f√∫tbol. ‚öΩüí∞";
  }
}

/**
 * Manejador del evento 'submit' del formulario
 */
form.addEventListener('submit', (event) => {
  event.preventDefault();

  // Capturamos los valores del formulario
  const initialAmount = parseFloat(document.getElementById('initial-amount').value);
  const monthlyContribution = parseFloat(document.getElementById('monthly-contribution').value);
  const interestRate = parseFloat(document.getElementById('interest-rate').value);
  const years = parseInt(document.getElementById('years').value);

  // Calculamos los montos anuales
  const savingsData = calculateSavings(initialAmount, monthlyContribution, interestRate, years);
  
  // Renderizamos la gr√°fica
  renderChart(savingsData);

  // Obtenemos la cantidad final (√∫ltimo valor del array)
  const finalAmount = savingsData[savingsData.length - 1];

  // Mostramos mensaje seg√∫n el nivel
  const message = getFunLevel(finalAmount);
  resultMessage.textContent = `Nivel alcanzado: ${message}`;
});

